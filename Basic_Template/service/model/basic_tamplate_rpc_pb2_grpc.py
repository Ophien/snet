# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from service.model import basic_tamplate_rpc_pb2 as service_dot_model_dot_basic__tamplate__rpc__pb2


class AdditionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.add = channel.unary_unary(
        '/Addition/add',
        request_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.SerializeToString,
        response_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.FromString,
        )


class AdditionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def add(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AdditionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'add': grpc.unary_unary_rpc_method_handler(
          servicer.add,
          request_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.FromString,
          response_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Addition', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SubtractionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sub = channel.unary_unary(
        '/Subtraction/sub',
        request_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.SerializeToString,
        response_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.FromString,
        )


class SubtractionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def sub(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SubtractionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sub': grpc.unary_unary_rpc_method_handler(
          servicer.sub,
          request_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.FromString,
          response_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Subtraction', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MultiplicationStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.mul = channel.unary_unary(
        '/Multiplication/mul',
        request_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.SerializeToString,
        response_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.FromString,
        )


class MultiplicationServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def mul(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MultiplicationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'mul': grpc.unary_unary_rpc_method_handler(
          servicer.mul,
          request_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.FromString,
          response_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Multiplication', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DivisionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.div = channel.unary_unary(
        '/Division/div',
        request_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.SerializeToString,
        response_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.FromString,
        )


class DivisionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def div(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DivisionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'div': grpc.unary_unary_rpc_method_handler(
          servicer.div,
          request_deserializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Numbers.FromString,
          response_serializer=service_dot_model_dot_basic__tamplate__rpc__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Division', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
